// Link to Code Editor https://code.earthengine.google.com/b3019e3874661102fac7d73faf54f229?noload=true
// Ingest GPS sampling locations into Earth Engine as an asset before running this code.

// Creates NDVI time series.
// Sensor harmonization coefficients
var coefficients = {
  itcps: ee.Image.constant([0.0003, 0.0088, 0.0061, 0.0412, 0.0254, 0.0172])
             .multiply(10000),
  slopes: ee.Image.constant([0.8474, 0.8483, 0.9047, 0.8462, 0.8937, 0.9071])
};
// Define function to get and rename bands of interest from OLI
function renameOLI(img) {
  return img.select(
		['B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'pixel_qa'],
		['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']
	);
}
// Define function to get and rename bands of interest from ETM+
function renameETM(img) {
  return img.select(
		['B1', 'B2', 'B3', 'B4', 'B5', 'B7', 'pixel_qa'],
		['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2', 'pixel_qa']
  );
}
// Apply coefficients
function etmToOli(img) {
  return img.select(['Blue', 'Green', 'Red', 'NIR', 'SWIR1', 'SWIR2'])
    .multiply(coefficients.slopes)
    .add(coefficients.itcps)
    .round()
    .toShort()
    .addBands(img.select('pixel_qa')
    .copyProperties(img, ['system:time_start'])
  );
}
// Define function to prepare OLI images
function prepOli(img) {
  var orig = img;
  img = renameOLI(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}
// Define function to prepare ETM+ images
function prepEtm(img) {
  var orig = img;
  img = renameETM(img);
  img = etmToOli(img);
  return ee.Image(img.copyProperties(orig, orig.propertyNames()));
}
// Load image collections
var Lansat8 = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
    .filterBounds(GPS)
    .filterDate('1980-01-01', '2020-03-31')
    .map(prepOli);
var Lansat7 = ee.ImageCollection('LANDSAT/LE07/C01/T1_SR')
    .filterBounds(GPS)
    .filterDate('1980-01-01', '2020-03-31')
    .map(prepEtm);
var Lansat5 = ee.ImageCollection('LANDSAT/LT05/C01/T1_SR')
    .filterBounds(GPS)
    .filterDate('1980-01-01', '2020-03-31')
    .map(prepEtm);
// Merge the collections
var imagery = Lansat5.merge(Lansat7).merge(Lansat8).sort('system:time_start');
// Function to calculate NDVI and add as a band
var addNDVI = function(img) {
  return img.addBands(img.expression(
    '(NIR - RED) / (NIR + RED)', {
      'NIR': img.select('NIR'),
      'RED': img.select('Red')
}).rename('NDVI'))};
// Add variables to image collection
var imageryVar = imagery
  .map(addNDVI)
  .sort('system:time_start');
print("Imagery",imageryVar);
// Create buffers
var buf = GPS.map(function(f) {
  return f.buffer(50,5);
});
// Export NDVI table
var tripletsNDVI = imageryVar.map(function(image) {
  return image.select('NDVI').reduceRegions({
    collection: buf.select(['Site_ID']), 
    reducer: ee.Reducer.mean(), 
    scale: 30
  }).filter(ee.Filter.neq('mean', null))
    .map(function(f) { 
      return f.set('imageId', image.id());
    });
}).flatten();
// Format a table of triplets into a 2D table of rowId x colId.
var format = function(table, rowId, colId) {
  var rows = table.distinct(rowId);
  var joined = ee.Join.saveAll('matches').apply({
    primary: rows, 
    secondary: table, 
    condition: ee.Filter.equals({
      leftField: rowId, 
      rightField: rowId
    })
  });
  return joined.map(function(row) {
      var values = ee.List(row.get('matches')).map(function(feature) {
          feature = ee.Feature(feature);
          return [feature.get(colId), feature.get('mean')];
        });
      return row.select([rowId]).set(ee.Dictionary(values.flatten()));
    });
};
var table1 = format(tripletsNDVI, 'Site_ID', 'imageId');
var desc1 = 'Landsat_SR_NDVI'; 
Export.table.toDrive({
  collection: table1, 
  description: desc1, 
  fileNamePrefix: desc1,
  fileFormat: 'CSV'
});
